// <auto-generated />
using System;
using InvoiceERP.iDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvoiceERP.Migrations
{
    [DbContext(typeof(IDataContext))]
    [Migration("20240202145502_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InvoiceERP.Models.TblAccountControl", b =>
                {
                    b.Property<int>("AccountControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountControlID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountControlId"));

                    b.Property<string>("AccountControlName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AccountHeadId")
                        .HasColumnType("int")
                        .HasColumnName("AccountHeadID");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AccountControlId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("tblAccountControl", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblAccountHead", b =>
                {
                    b.Property<int>("AccountHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountHeadID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountHeadId"));

                    b.Property<string>("AccountHeadName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AccountHeadId");

                    b.HasIndex("UserId");

                    b.ToTable("tblAccountHead", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblAccountSubControl", b =>
                {
                    b.Property<int>("AccountSubControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountSubControlID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountSubControlId"));

                    b.Property<int>("AccountControlId")
                        .HasColumnType("int")
                        .HasColumnName("AccountControlID");

                    b.Property<int>("AccountHeadId")
                        .HasColumnType("int")
                        .HasColumnName("AccountHeadID");

                    b.Property<string>("AccountSubControlName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AccountSubControlId");

                    b.HasIndex("AccountControlId");

                    b.HasIndex("AccountHeadId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("tblAccountSubControl", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("BranchContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BranchTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BranchTypeID");

                    b.Property<int?>("BrchId")
                        .HasColumnType("int")
                        .HasColumnName("BrchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.HasKey("BranchId");

                    b.HasIndex("BranchTypeId");

                    b.ToTable("tblBranch", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblBranchType", b =>
                {
                    b.Property<int>("BranchTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BranchTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchTypeId"));

                    b.Property<string>("BranchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BranchTypeId");

                    b.ToTable("tblBranchType", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("categoryName");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CategoryId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("tblCategory", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCompany", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Logo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CompanyId");

                    b.ToTable("tblCompany", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CustomerArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CustomerContact")
                        .HasColumnType("int");

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CustomerId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("tblCustomer", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomerInvoice", b =>
                {
                    b.Property<int>("CustomerInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerInvoiceId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CustomerInvoiceId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("tblCustomerInvoice", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomerInvoiceDetail", b =>
                {
                    b.Property<int>("CustomerInvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerInvoiceDetailId"));

                    b.Property<int>("CustomerInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("SaleQuantity")
                        .HasColumnType("int");

                    b.Property<double>("SaleUnitPrice")
                        .HasColumnType("float");

                    b.HasKey("CustomerInvoiceDetailId");

                    b.HasIndex("CustomerInvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("tblCustomerInvoiceDetail", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomerPayment", b =>
                {
                    b.Property<int>("CustomerPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerPaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerPaymentId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("CustomerInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerInvoiceID");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("invoiceNo");

                    b.Property<double>("PaidAmount")
                        .HasColumnType("float");

                    b.Property<double>("RemainingBalance")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CustomerPaymentId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerInvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("tblCustomerPayment", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblEmployee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("Cnic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CNIC");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varbinary(300)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<double>("MonthlySalary")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Photo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("tblEmployee", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblFinancialYear", b =>
                {
                    b.Property<int>("FinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FinancialYearID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialYearId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FinancialYear")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FinancialYearId");

                    b.HasIndex("UserId");

                    b.ToTable("tblFinancialYear", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblPayroll", b =>
                {
                    b.Property<int>("PayrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayrollID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayrollId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<string>("PayrollInvoiceNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SalaryMonth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SalaryYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("TransferAmount")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PayrollId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("tblPayroll", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblStock", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<double>("CurrentPurchaseUnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Manufacture")
                        .HasColumnType("date");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SaleUnitPrice")
                        .HasColumnType("float");

                    b.Property<int>("StockTreshHoldQuantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ProductId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("tblStock", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SupplierConatctNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SupplierId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("tblSupplier", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplierInvoice", b =>
                {
                    b.Property<int>("SupplierInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierInvoiceId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<int>("InvoiceNo")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SupplierInvoiceId")
                        .HasName("PK_tblSupplierInvoiceTable");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("tblSupplierInvoice", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplierInvoiceDetail", b =>
                {
                    b.Property<int>("SupplierInvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierInvoiceDetailId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("PurchaseQuantity")
                        .HasColumnType("int");

                    b.Property<double>("PurchaseUnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("purchaseUnitPrice");

                    b.Property<int>("SupplierInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceID");

                    b.HasKey("SupplierInvoiceDetailId")
                        .HasName("PK_tblSupplierInvoiceDetailTable");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierInvoiceId");

                    b.ToTable("tblSupplierInvoiceDetail", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplierPayment", b =>
                {
                    b.Property<int>("SupplierPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierPaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierPaymentId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("invoiceNo");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<double>("RemainingBalance")
                        .HasColumnType("float");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int>("SupplierInvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierInvoiceID");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SupplierPaymentId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("tblSupplierPayment", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("AccountControlId")
                        .HasColumnType("int")
                        .HasColumnName("AccountControlID");

                    b.Property<int>("AccountHeadId")
                        .HasColumnType("int")
                        .HasColumnName("AccountHeadID");

                    b.Property<int>("AccountSubControlId")
                        .HasColumnType("int")
                        .HasColumnName("AccountSubControlID");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<int>("FinancialYearId")
                        .HasColumnType("int")
                        .HasColumnName("FinancialYearID");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TransactionId")
                        .HasName("PK_TransectionTable");

                    b.HasIndex("AccountControlId");

                    b.HasIndex("AccountHeadId");

                    b.HasIndex("AccountSubControlId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("UserId");

                    b.ToTable("tblTransaction", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    b.HasKey("UserId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("tblUser", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblUserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UserTypeId");

                    b.ToTable("tblUserType", (string)null);
                });

            modelBuilder.Entity("InvoiceERP.Models.TblAccountControl", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblAccountControls")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccountControl_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblAccountControls")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccountControl_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblAccountControls")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccountControl_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblAccountHead", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblAccountHeads")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccountHead_tblUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblAccountSubControl", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblAccountControl", "AccountControl")
                        .WithMany("TblAccountSubControls")
                        .HasForeignKey("AccountControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblAccountSubControl_tblAccountControl");

                    b.HasOne("InvoiceERP.Models.TblAccountHead", "AccountHead")
                        .WithMany("TblAccountSubControls")
                        .HasForeignKey("AccountHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblAccountSubControl_tblAccountHead");

                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblAccountSubControls")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccountSubControl_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblAccountSubControls")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccountSubControl_tblUser");

                    b.Navigation("AccountControl");

                    b.Navigation("AccountHead");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblBranch", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranchType", "BranchType")
                        .WithMany("TblBranches")
                        .HasForeignKey("BranchTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBranch_tblBranchType");

                    b.Navigation("BranchType");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCategory", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblCategories")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCategory_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblCategories")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCategory_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblCategories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCategory_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomer", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblCustomers")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomer_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblCustomers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomer_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblCustomers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomer_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomerInvoice", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblCustomerInvoices")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerInvoice_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblCustomerInvoices")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerInvoice_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblCustomer", "Customer")
                        .WithMany("TblCustomerInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerInvoice_tblCustomer");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblCustomerInvoices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerInvoice_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomerInvoiceDetail", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblCustomerInvoice", "CustomerInvoice")
                        .WithMany("TblCustomerInvoiceDetails")
                        .HasForeignKey("CustomerInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerInvoiceDetail_tblCustomerInvoice");

                    b.HasOne("InvoiceERP.Models.TblStock", "Product")
                        .WithMany("TblCustomerInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerInvoiceDetail_tblStock");

                    b.Navigation("CustomerInvoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomerPayment", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblCustomerPayments")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerPayment_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblCustomerPayments")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerPayment_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblCustomerInvoice", "CustomerInvoice")
                        .WithMany("TblCustomerPayments")
                        .HasForeignKey("CustomerInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerPayment_tblCustomerInvoice");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblCustomerPayments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCustomerPayment_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("CustomerInvoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblEmployee", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblEmployees")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblEmployee_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblEmployees")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblEmployee_tblCompany");

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblFinancialYear", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblFinancialYears")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblFinancialYear_tblUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblPayroll", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblPayrolls")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblPayroll_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblPayrolls")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPayroll_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblEmployee", "Employee")
                        .WithMany("TblPayrolls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblPayroll_tblEmployee");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblPayrolls")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPayroll_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblStock", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblStocks")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblStock_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCategory", "Category")
                        .WithMany("TblStocks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblStock_tblCategory");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblStocks")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblStock_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblStocks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblStock_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplier", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblSuppliers")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplier_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblSuppliers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplier_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblSuppliers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplier_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplierInvoice", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblBranch", "Branch")
                        .WithMany("TblSupplierInvoices")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplierInvoiceTable_tblBranch");

                    b.HasOne("InvoiceERP.Models.TblCompany", "Company")
                        .WithMany("TblSupplierInvoices")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplierInvoiceTable_tblCompany");

                    b.HasOne("InvoiceERP.Models.TblSupplier", "Supplier")
                        .WithMany("TblSupplierInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplierInvoiceTable_tblSupplier");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblSupplierInvoices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplierInvoice_tblUser");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplierInvoiceDetail", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblStock", "Product")
                        .WithMany("TblSupplierInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplierInvoiceDetail_tblStock");

                    b.HasOne("InvoiceERP.Models.TblSupplierInvoice", "SupplierInvoice")
                        .WithMany("TblSupplierInvoiceDetails")
                        .HasForeignKey("SupplierInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplierInvoiceDetail_tblSupplierInvoice");

                    b.Navigation("Product");

                    b.Navigation("SupplierInvoice");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplierPayment", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblSupplier", "Supplier")
                        .WithMany("TblSupplierPayments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplierPayment_tblSupplier");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblSupplierPayments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSupplierPayment_tblUser");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblTransaction", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblAccountControl", "AccountControl")
                        .WithMany("TblTransactions")
                        .HasForeignKey("AccountControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblTransaction_tblAccountControl");

                    b.HasOne("InvoiceERP.Models.TblAccountHead", "AccountHead")
                        .WithMany("TblTransactions")
                        .HasForeignKey("AccountHeadId")
                        .IsRequired()
                        .HasConstraintName("FK_tblTransaction_tblAccountHead");

                    b.HasOne("InvoiceERP.Models.TblAccountSubControl", "AccountSubControl")
                        .WithMany("TblTransactions")
                        .HasForeignKey("AccountSubControlId")
                        .IsRequired()
                        .HasConstraintName("FK_tblTransection_tblAccountSubControl");

                    b.HasOne("InvoiceERP.Models.TblFinancialYear", "FinancialYear")
                        .WithMany("TblTransactions")
                        .HasForeignKey("FinancialYearId")
                        .IsRequired()
                        .HasConstraintName("FK_tblTransaction_tblFinancialYear");

                    b.HasOne("InvoiceERP.Models.TblUser", "User")
                        .WithMany("TblTransactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tblTransaction_tblUser");

                    b.Navigation("AccountControl");

                    b.Navigation("AccountHead");

                    b.Navigation("AccountSubControl");

                    b.Navigation("FinancialYear");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblUser", b =>
                {
                    b.HasOne("InvoiceERP.Models.TblUserType", "UserType")
                        .WithMany("TblUsers")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblUser_tblUserType");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblAccountControl", b =>
                {
                    b.Navigation("TblAccountSubControls");

                    b.Navigation("TblTransactions");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblAccountHead", b =>
                {
                    b.Navigation("TblAccountSubControls");

                    b.Navigation("TblTransactions");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblAccountSubControl", b =>
                {
                    b.Navigation("TblTransactions");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblBranch", b =>
                {
                    b.Navigation("TblAccountControls");

                    b.Navigation("TblAccountSubControls");

                    b.Navigation("TblCategories");

                    b.Navigation("TblCustomerInvoices");

                    b.Navigation("TblCustomerPayments");

                    b.Navigation("TblCustomers");

                    b.Navigation("TblEmployees");

                    b.Navigation("TblPayrolls");

                    b.Navigation("TblStocks");

                    b.Navigation("TblSupplierInvoices");

                    b.Navigation("TblSuppliers");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblBranchType", b =>
                {
                    b.Navigation("TblBranches");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCategory", b =>
                {
                    b.Navigation("TblStocks");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCompany", b =>
                {
                    b.Navigation("TblAccountControls");

                    b.Navigation("TblCategories");

                    b.Navigation("TblCustomerInvoices");

                    b.Navigation("TblCustomerPayments");

                    b.Navigation("TblCustomers");

                    b.Navigation("TblEmployees");

                    b.Navigation("TblPayrolls");

                    b.Navigation("TblStocks");

                    b.Navigation("TblSupplierInvoices");

                    b.Navigation("TblSuppliers");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomer", b =>
                {
                    b.Navigation("TblCustomerInvoices");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblCustomerInvoice", b =>
                {
                    b.Navigation("TblCustomerInvoiceDetails");

                    b.Navigation("TblCustomerPayments");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblEmployee", b =>
                {
                    b.Navigation("TblPayrolls");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblFinancialYear", b =>
                {
                    b.Navigation("TblTransactions");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblStock", b =>
                {
                    b.Navigation("TblCustomerInvoiceDetails");

                    b.Navigation("TblSupplierInvoiceDetails");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplier", b =>
                {
                    b.Navigation("TblSupplierInvoices");

                    b.Navigation("TblSupplierPayments");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblSupplierInvoice", b =>
                {
                    b.Navigation("TblSupplierInvoiceDetails");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblUser", b =>
                {
                    b.Navigation("TblAccountControls");

                    b.Navigation("TblAccountHeads");

                    b.Navigation("TblAccountSubControls");

                    b.Navigation("TblCategories");

                    b.Navigation("TblCustomerInvoices");

                    b.Navigation("TblCustomerPayments");

                    b.Navigation("TblCustomers");

                    b.Navigation("TblFinancialYears");

                    b.Navigation("TblPayrolls");

                    b.Navigation("TblStocks");

                    b.Navigation("TblSupplierInvoices");

                    b.Navigation("TblSupplierPayments");

                    b.Navigation("TblSuppliers");

                    b.Navigation("TblTransactions");
                });

            modelBuilder.Entity("InvoiceERP.Models.TblUserType", b =>
                {
                    b.Navigation("TblUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
